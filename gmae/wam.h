/*
   Marfitude
   Copyright (C) 2004 Mike Shal

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#define MAX_NOTE 4
#define MAX_COLS 8

/* a column is one group of module channels in one pattern. */
/* There are a constant number of columns in each pattern, which is */
/* less than or equal to the number of module channels */
/* the Column specifies which module channels it contains */
struct column {
	int numchn;	/* number of channels in this column */
	int *chan;	/* list of numchn channels */
};

/* a pattern is a group of columns.  It is called a pattern because it is */
/* based on the module concept of a "pattern."  So for a single pattern in a */
/* mod we have a single pattern in the WAM file, which gives the column */
/* to channel relationship.  Therefore, the channels in a column are */
/* consistent throughout a single pattern.  Here, patterns are ever increasing, */
/* even if they are duplicates (unlike a mod, which can have a single pattern */
/* be played at multiple song positions) */
struct pattern {
	struct column columns[MAX_COLS]; /* numCols columns */
	struct column unplayed;          /* contains all the channels not
	                                  * represented by the other columns */
};

struct row {
	/* the following are taken from the mod file itself */
	/* they are used for speed calculations and reference data */
	int bpm;	/* bpm for this row */
	int sngspd;	/* sngspd for this row */
	int patpos;	/* this row number (position in pattern) */
	int sngpos;	/* position in song */

	/* the following are generated by the program */
	int ticpos;	/* tick count up to this point */
	int ticprt;	/* how many ticks into the group this row is */
	int ticgrp;	/* total # ticks in a group (4 rows) */
	int line;	/* 0 = no line, 1 = regular line, 2 = start of new patt */
	int patnum;	/* the pattern this row is in */
	char notes[MAX_COLS];	/* 0 = no note, 1, 2, 4 = position of note */
};

struct wam {
	int numCols;			/* number of columns in the song,
					 * <= mod->numchn */
	int numTics;			/* number of ticks in the song */
	int numPats;			/* number of patterns */
	int numRows;			/* number of rows */
	struct pattern *patterns;	/* numPats Patterns */
	struct row *rowData;		/* numRows Rows */
};

void FreeWam(struct wam *wam);		/* frees wam from LoadWam */
int WriteWam(char *modFile);	/* loads the modFile and creates and writes */
				/* the appropriate WamFile, returns 1 if */
				/* successful, 0 on failure */
struct wam *LoadWam(char *modFile); /* loads the wam related to the modFile, */
				/* and returns it.  Must be freed later by */
				/* FreeWam */

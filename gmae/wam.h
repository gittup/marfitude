/*
   Marfitude
   Copyright (C) 2004 Mike Shal

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/** @file
  * @brief Contains the description of a WAM file.
  *
  * This file describes a WAM - the structure used to play notes in a song.
  */

/** The maximum note - a power of 2. Here, 4 means there's 3 notes (1, 2, 4) */
#define MAX_NOTE 4

/** The maximum number of columns. Used for static allocation */
#define MAX_COLS 8

/** A column is one group of module channels in one pattern.
 * There are a constant number of columns in each pattern, which is
 * less than or equal to the number of module channels.
 * The column specifies which module channels it contains
 */
struct column {
	int numchn; /**< number of channels in this column */
	int *chan;  /**< list of numchn channels */
};

/** A pattern is a group of columns.  It is called a pattern because it is
 * based on the module concept of a "pattern."  So for a single pattern in a
 * mod we have a single pattern in the WAM file, which gives the column
 * to channel relationship.  Therefore, the channels in a column are
 * consistent throughout a single pattern.  Here, patterns are ever increasing,
 * even if they are duplicates (unlike a mod, which can have a single pattern
 * be played at multiple song positions)
 */
struct pattern {
	struct column columns[MAX_COLS]; /**< numCols columns */
	struct column unplayed;          /**< contains all the channels not
	                                  * represented by the other columns
					  */
};

/**< A row is the the smallest unit for a note. Ie, only one note can be on
 * a given column/row. Rows are subdivided into ticks for speed purposes.
 */
struct row {
	/* the following are taken from the mod file itself */
	/* they are used for speed calculations and reference data */
	int bpm;    /**< bpm for this row */
	int sngspd; /**< sngspd for this row */
	int patpos; /**< this row number (position in pattern) */
	int sngpos; /**< position in song */

	/* the following are generated by the program */
	int ticpos;  /**< tick count up to this point */
	int ticprt;  /**< how many ticks into the group this row is */
	int ticgrp;  /**< total # ticks in a group (4 rows) */
	int line;    /**< 0 = no line, 1 = regular line, 2 = pattern start */
	int patnum;  /**< the pattern this row is in */
	double time; /**< The time in seconds since the start of the song */
	char notes[MAX_COLS]; /**< 0 = no note, 1, 2, 4 = position of note */
};

/** The wam is the structure that corresponds to a mod file. The wam contains
 * all the note data necessary to figure out how to play the song.
 */
struct wam {
	int numCols;                /**< number of columns in the song,
				     * <= mod->numchn
				     */
	int numTics;                /**< number of ticks in the song */
	int numPats;                /**< number of patterns */
	int numRows;                /**< number of rows */
	double songLength;          /**< length of the song, in seconds */
	struct pattern *patterns;   /**< numPats Patterns */
	struct row *rowData;        /**< numRows Rows */
};

void FreeWam(struct wam *wam);
int WriteWam(const char *modFile);
struct wam *LoadWam(const char *modFile);
